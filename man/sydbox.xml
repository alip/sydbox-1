<?xml version='1.0' encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd" [
  <!ENTITY % sydbox SYSTEM "sydbox.ent">
  %sydbox;
]>

<!--
   Copyright (c) 2011, 2012, 2013, 2015 Ali Polatel <alip@exherbo.org>
   Distributed under the terms of the 3-clause BSD license.
-->

<refentry id="sydbox" lang="en">
  <refentryinfo>
    <title>sydbox</title>
    <productname>sydbox</productname>

    <authorgroup>
      <author>
        <contrib>Developer</contrib>
        <firstname>Ali</firstname>
        <surname>Polatel</surname>
        <email>alip@exherbo.org</email>
      </author>
    </authorgroup>
  </refentryinfo>

  <refmeta>
    <refentrytitle>sydbox</refentrytitle>
    <manvolnum>1</manvolnum>
    <refmiscinfo class="source">sydbox-&SYDBOX_VERSION;</refmiscinfo>
    <refmiscinfo class="manual">Sydbox-&SYDBOX_VERSION;</refmiscinfo>
  </refmeta>

  <refnamediv>
    <refname>sydbox</refname>
    <refpurpose>ptrace based sandbox</refpurpose>
  </refnamediv>

  <refsynopsisdiv id="synopsis">
    <cmdsynopsis>
      <command>sydbox <arg choice="opt">-hv</arg> <arg choice="opt" rep="repeat">-c pathspec</arg> <arg choice="opt" rep="repeat">-m magic</arg> <arg choice="opt" rep="repeat">-E var=val</arg> <arg choice="req">command <arg choice="opt" rep="repeat">arg</arg></arg></command>
    </cmdsynopsis>
  </refsynopsisdiv>

  <refsect1 id="description">
    <title>Description</title>

    <para>
      <command>sydbox</command> is a
      <citerefentry><refentrytitle>ptrace</refentrytitle><manvolnum>2</manvolnum></citerefentry>
      based sandboxing utility for Linux.
    </para>
  </refsect1>

  <refsect1 id="options">
    <title>Options</title>

    <simpara>The following options are understood:</simpara>

    <variablelist>
      <varlistentry>
        <term><option>-h</option></term>
        <listitem>
          <simpara>
            Show usage and exit
          </simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-v</option></term>
        <listitem>
          <simpara>
            Show version and exit
          </simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-c</option> <filename>pathspec</filename></term>
        <listitem>
          <simpara>
            <filename>pathspec</filename> to the configuration file, may be repeated.
            See <xref linkend="configuration"/> for more information.
          </simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-m</option> <varname>magic</varname></term>
        <listitem>
          <simpara>
            Run a magic command during init, may be repeated.
            See <xref linkend="configuration"/> for more information.
          </simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-E</option> <varname>var=val</varname></term>
        <listitem>
          <simpara>
            Put <varname>var=val</varname> in the environment for command, may be repeated
          </simpara>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><option>-E</option> <varname>var</varname></term>
        <listitem>
          <simpara>
            Remove <varname>var</varname> from the environment for command, may be repeated
          </simpara>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 id="configuration">
    <title>Configuration</title>

    <para role="summary">
      Sydbox is configured through the so-called <emphasis>magic</emphasis> commands.
      There are three ways to supply magic commands:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Sydbox may be configured using a configuration file. The path to the configuration file is
          speficied using the <option>-c</option> command line switch or the <envar>SYDBOX_CONFIG</envar>
          environment variable. More than one configuration file may be specified this way. However, only the
          <emphasis role="bold">initial</emphasis> configuration file can change the <emphasis>core</emphasis>
          configuration. If path to the configuration file is prefixed with the character '<literal>@</literal>',
          Sydbox looks for this configuration file under
          <filename class="directory"><varname>$sharedir</varname>/sydbox/</filename> where <varname>$sharedir</varname>
          is usually <filename class="directory">/usr/share</filename>.  The command line switch has precedence over the
          <envar>SYDBOX_CONFIG</envar> environment variable.
        </para>
      </listitem>
      <listitem>
        <para>
          Sydbox may be configured using magic
          <citerefentry><refentrytitle>stat</refentrytitle><manvolnum>2</manvolnum></citerefentry> calls during runtime.
          This is achieved by calling <function>stat()</function> system call on the special path
          <filename>/dev/sydbox</filename> followed by the magic command. Note that runtime configuration is only
          possible if the magic lock is <emphasis>unset</emphasis>. The system call <function>stat()</function> was
          chosen as the magic call because it is practical to invoke using builtin shell commands like:
          <programlisting>
            test -e /dev/sydbox/core/sandbox/read:deny
          </programlisting>
          which enables read sandboxing for a shell running under Sydbox. It is also possible to
          query certain values using the return value of the magic <function>stat</function><manvolnum>2</manvolnum>:
          <programlisting>
            test -e '/dev/sydbox/core/sandbox/read?' &amp;&amp; echo "read sandboxing on" || echo "read sandboxing off"
          </programlisting>

          <note>
            <para>
              Some of these shell builtins may actually call
              <citerefentry><refentrytitle>lstat</refentrytitle><manvolnum>2</manvolnum></citerefentry> system call instead
              of <citerefentry><refentrytitle>stat</refentrytitle><manvolnum>2</manvolnum></citerefentry> thus
              Sydbox makes sure to check <function>lstat()</function> system calls for magic commands
              as well.
            </para>
          </note>
        </para>
      </listitem>
    </itemizedlist>

    <refsect2 id="command-types">
      <title>Command Types</title>

      <para role="summary">
        Every <emphasis>magic</emphasis> command accepts an argument of a certain type.
        The available types are listed below:
      </para>

      <variablelist>
        <varlistentry>
          <term><option>boolean</option></term>
          <listitem>
            <para>
              A boolean type may have one of the two values,
              <varname>true</varname> or <varname>false</varname>.
              To specify boolean values when supplying <emphasis>magic</emphasis> commands to Sydbox, you may also use
              <varname>true</varname> or <varname>false</varname>.
              In addition you can use the short forms
              <varname>t</varname> or <varname>f</varname>
              and you can also use
              <varname>1</varname> or <varname>0</varname>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>integer</option></term>
          <listitem>
            <para>
              This type represents the basic integer type.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>string</option></term>
          <listitem>
            <para>
              This type represents the basic string type.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>string-array</option></term>
          <listitem>
            <para>
              This type represents a list of strings.
              Other types aren't allowed within this type.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option>command</option></term>
          <listitem>
            <para>
              This is a special type which is used to make sydbox execute certain functions.
              It is meant to be used as a basic interprocess communication to workaround some tracing limitations.
            </para>
            <note>
              <para>
                Magic commands of this type can only be used with the magic
                <function>stat</function><manvolnum>2</manvolnum> system call.
              </para>
            </note>
          </listitem>
        </varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="specifying-magic-commands">
      <title>Specifying Magic Commands</title>

      <para>
        As mentioned in <xref linkend="configuration"/> Sydbox may be configured using the so-called
        <emphasis>magic</emphasis> commands. Format of the magic commands is simple:
        <programlisting>
          ${PREFIX}/section/of/option${OPERATION_CHARACTER}value
        </programlisting>
        where <parameter>${PREFIX}</parameter> is <filename class="directory">/dev/sydbox</filename>
        by default (may be altered at compile-time using <parameter>SYDBOX_MAGIC_PREFIX</parameter> definition).
        This prefix is only required for magic <function>stat()</function>, not for <option>-m</option> command line
        switch.
      </para>

      <para role="summary">
        <parameter>${OPERATION_CHARACTER}</parameter> determines the operation of the magic command.
        Possible values are listed below:
      </para>

      <variablelist>
        <varlistentry>
          <term>:</term>
          <listitem>
            <simpara>
              This term is used to set a value.
              Value must be either a boolean, an integer or a string.
            </simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>?</term>
          <listitem>
            <simpara>
              This term is used to query a value. Boolean values and certain other values may be queried.
            </simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>+</term>
          <listitem>
            <simpara>
              This term is used to append to a string array.
            </simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>-</term>
          <listitem>
            <simpara>
              This is used to remove an element from a string array.
            </simpara>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term>!</term>
          <listitem>
            <simpara>
              This is used to execute a special sydbox command.
            </simpara>
          </listitem>
        </varlistentry>
      </variablelist>
    </refsect2>

    <refsect2 id="configuration-file-format">
      <title>Configuration File Format</title>

      <para role="summary">
        Configuration file format of sydbox is simple. It is just a way to supply many magic commands in a convenient
        way. All empty lines and lines starting with the number sign '<constant>#</constant>' are ignored. All the other
        lines are treated as if they were supplied to Sydbox via the <option>-m</option> command line switch.
      </para>

    </refsect2>

    <refsect2 id="configuration-file-naming">
      <title>Configuration File Naming</title>

      <para role="summary">
        Configuration file naming of sydbox follows a naming scheme which makes it possible to extract magic command API
        version from the file name. A sydbox configuration file must have the extension "&SYDBOX_FNAME_EXT;" followed by
        the API version (e.g. "&SYDBOX_FNAME_EXT;&SYDBOX_API_VERSION;" for API version &SYDBOX_API_VERSION;).
      </para>

      <para>
        Current magic command API of sydbox version is `&SYDBOX_API_VERSION;'.
      </para>

    </refsect2>

    <refsect2>
      <title>Commands</title>

      <para role="summary">
        Sydbox recognizes the following magic commands:
      </para>

      <variablelist>
        <varlistentry>
          <term><option id="core-sandbox-exec">core/sandbox/exec</option></term>
          <listitem>
            <para>type: <type>string</type></para>
            <para>default: <varname>false</varname></para>
            <para>query: <varname>yes</varname></para>
            <para>
              A string specifying how <function>execve</function><manvolnum>2</manvolnum> system call should be sandboxed.
              See <xref linkend="execve-sandboxing"/> for more information.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-sandbox-read">core/sandbox/read</option></term>
          <listitem>
            <para>type: <type>string</type></para>
            <para>default: <varname>false</varname></para>
            <para>query: <varname>yes</varname></para>
            <para>
              A string specifying how read sandboxing should be done.
              See <xref linkend="read-sandboxing"/> for more information.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-sandbox-write">core/sandbox/write</option></term>
          <listitem>
            <para>type: <type>string</type></para>
            <para>default: <varname>false</varname></para>
            <para>query: <varname>yes</varname></para>
            <para>
              A string specifying how write sandboxing should be done.
              See <xref linkend="write-sandboxing"/> for more information.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-sandbox-network">core/sandbox/network</option></term>
          <listitem>
            <para>type: <type>string</type></para>
            <para>default: <varname>false</varname></para>
            <para>query: <varname>yes</varname></para>
            <para>
              A string specifying how network sandboxing should be done.
              See <xref linkend="network-sandboxing"/> for more information.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-restrict-fcntl">core/restrict/file_control</option></term>
          <listitem>
            <para>type: <type>boolean</type></para>
            <para>default: <varname>false</varname></para>
            <para>
              A boolean specifying whether potentially dangerous options to
              <function>open</function><manvolnum>2</manvolnum> and
              <function>fcntl</function><manvolnum>2</manvolnum> should be forbidden.
              These options include <constant>O_ASYNC</constant>, <constant>O_DIRECT</constant> and
              <constant>O_SYNC</constant>. In addition <emphasis>all</emphasis>
              <function>fcntl</function><manvolnum>2</manvolnum> commands <emphasis>except</emphasis>
              <constant>F_GETFL</constant>,
              <constant>F_SETFL</constant>,
              <constant>F_SETOWN</constant>,
              <constant>F_SETLK</constant>,
              <constant>F_SETLKW</constant>,
              <constant>F_SETLK64</constant>,
              <constant>F_SETLKW64</constant>,
              <constant>F_SETFD</constant>,
              <constant>F_GETFD</constant> and
              <constant>F_DUPFD</constant> are forbidden as well.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-restrict-shm-wr">core/restrict/shared_memory_writable</option></term>
          <listitem>
            <para>type: <type>boolean</type></para>
            <para>default: <varname>false</varname></para>
            <para>
              A boolean specifying whether writable shared memory mapping (
              <function>mmap2</function><manvolnum>2</manvolnum> with
              <constant>PROT_WRITE</constant> &amp; <constant>MAP_SHARED</constant> combination )
              should be forbidden.
            </para>

              <warning>
                <para>
                  This setting is meant as a protection against <constant>TOCTOU</constant> attacks. However, it should
                  be noted that such attack vectors are relatively diverse under a ptrace() monitoring environment.
                </para>
              </warning>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-whitelist-ppd">core/whitelist/per_process_directories</option></term>
          <listitem>
            <para>type: <type>boolean</type></para>
            <para>default: <varname>true</varname></para>
            <para>
              A boolean specifying whether per-process directories like
              <filename class="directory">/proc/<envar>$pid</envar></filename>
              should automatically be whitelisted.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-whitelist-sb">core/whitelist/successful_bind</option></term>
          <listitem>
            <para>type: <type>boolean</type></para>
            <para>default: <varname>true</varname></para>
            <para>
              A boolean specifying whether the socket address arguments of successful
              <function>bind</function><manvolnum>2</manvolnum> calls should be whitelisted
              for <function>connect</function><manvolnum>2</manvolnum> and
              <function>sendto</function><manvolnum>2</manvolnum> system calls.
            </para>
            <note>
              <para>
                These socket addresses are whitelisted globally and not per-process for
                usability reasons. Thus, for example, a process which forks to call
                <function>bind</function><manvolnum>2</manvolnum> will have its socket
                address whitelisted for her parent as well.
              </para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-whitelist-usf">core/whitelist/unsupported_socket_families</option></term>
          <listitem>
            <para>type: <type>boolean</type></para>
            <para>default: <varname>true</varname></para>
            <para>
              A boolean specifying whether unknown socket families should be allowed access when network sandboxing is on.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-violation-decision">core/violation/decision</option></term>
          <listitem>
            <para>type: <type>string</type></para>
            <para>default: <varname>deny</varname></para>
            <para>
              A string specifying the decision to take when an access violation occurs. Possible values are
              <varname>kill</varname>, <varname>killall</varname> and <varname>deny</varname>.
              Default is <varname>deny</varname> which means to deny the system call and resume execution.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-violation-exit_code">core/violation/exit_code</option></term>
          <listitem>
            <para>type: <type>integer</type></para>
            <para>default: <varname>-1</varname></para>
            <para>
              An integer specifying the exit code in case <option>core/violation/decision</option> is
              <varname>killall</varname>.  As a special case, if this integer is equal to zero, sydbox exits with
              <varname>128</varname> added to the eldest process' exit value in case an access violation has occured.
              This special case is meant for program tests to check whether an access violation has occured using the
              exit code.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-violation-raise_fail">core/violation/raise_fail</option></term>
          <listitem>
            <para>type: <type>boolean</type></para>
            <para>default: <varname>false</varname></para>
            <para>
              A boolean specifying whether certain failures like errors during path resolution should be treated as
              access violations. Note this is just a switch for reporting, the access to the system call is denied
              nevertheless.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-violation-raise_safe">core/violation/raise_safe</option></term>
          <listitem>
            <para>type: <type>boolean</type></para>
            <para>default: <varname>false</varname></para>
            <para>
              A boolean specifying whether certain violations which are considered safe should be reported. For
              example, <function>mkdir</function><manvolnum>2</manvolnum> is a system call which fails when it can not
              create an existant directory. In this special case, sydbox denies the system call with
              <varname>EEXIST</varname> for consistency and does not raise an access violation in case
              <option>core/violation/raise_safe</option> is set to <varname>false</varname>. Other examples are, the
              <function>access</function><manvolnum>2</manvolnum> system call which is silently denied with
              <varname>EACCES</varname> and
              <function>listxattr</function><manvolnum>2</manvolnum>, and
              <function>llistxattr</function><manvolnum>2</manvolnum> system calls which are silently denied with
              <varname>ENOTSUP</varname> if this option is set to false.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-trace-follow_fork">core/trace/follow_fork</option></term>
          <listitem>
            <para>type: <type>boolean</type></para>
            <para>default: <varname>true</varname></para>
            <para>
              A boolean specifying whether Sydbox should follow forks, vforks and clones.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-trace-exit_kill">core/trace/exit_kill</option></term>
          <listitem>
            <para>type: <type>boolean</type></para>
            <para>default: <varname>false</varname></para>
            <para>
              A boolean specifying whether traced processes should be killed when Sydbox exits.
            </para>
            <note>
              <para>
                This is supported on Linux-3.8 or newer via <constant>PTRACE_O_EXITKILL</constant>.
              </para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-trace-magic_lock">core/trace/magic_lock</option></term>
          <listitem>
            <para>type: <type>string</type></para>
            <para>default: <varname>off</varname></para>
            <para>
              A string specifying the state of the magic lock. Possible values are <varname>on</varname>,
              <varname>off</varname> and <varname>exec</varname>. If magic lock is <varname>on</varname> no magic
              commands are allowed. Note, the magic lock is tracked per-process. If <varname>exec</varname> is
              specified, the magic lock is set to <varname>on</varname> when the process returns from the system call
              <function>execve</function><manvolnum>2</manvolnum>.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-trace-use_seccomp">core/trace/use_seccomp</option></term>
          <listitem>
            <para>type: <type>boolean</type></para>
            <para>default: <varname>false</varname></para>
            <para>
              A boolean specifying whether seccomp user-mode filters should be used. This works only on Linux-3.5 or
              newer and sydbox must be compiled with the <option>--enable-seccomp</option> configure option.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-trace-use_seize">core/trace/use_seize</option></term>
          <listitem>
            <para>type: <type>boolean</type></para>
            <para>default: <varname>false</varname></para>
            <para>
              A boolean specifying whether sydbox should use the new ptrace requests <constant>PTRACE_SEIZE</constant>
              and <constant>PTRACE_INTERRUPT</constant> to trace processes.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-trace-use_toolong_hack">core/trace/use_toolong_hack</option></term>
          <listitem>
            <para>type: <type>boolean</type></para>
            <para>default: <varname>false</varname></para>
            <para>
              A boolean specifying whether sydbox should use a hack to determine working directories under a path longer
              than <constant>PATH_MAX</constant>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-match-case-sensitive">core/match/case_sensitive</option></term>
          <listitem>
            <para>type: <type>boolean</type></para>
            <para>default: <varname>true</varname></para>
            <para>
              A boolean specifying the case sensitivity of pattern matching.
            </para>
            <para>See <xref linkend="pattern-matching"/> for more information.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="core-match-no-wildcard">core/match/no_wildcard</option></term>
          <listitem>
            <para>type: <type>string</type></para>
            <para>default: <varname>literal</varname></para>
            <para>
              A string specifying how to match patterns with no
              '<literal>*</literal>' or '<literal>?</literal>' characters in them.
              Possible values are <varname>literal</varname> and <varname>prefix</varname>.
              With <varname>literal</varname> such patterns are matched literally, whereas
              with <varname>prefix</varname> Sydbox appends <literal>/***</literal> to the
              end of such patterns to make them a prefix match. Implemented mostly to provide
              compatibility with sydbox-0 patterns.
            </para>
            <para>See <xref linkend="pattern-matching"/> for more information.</para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="exec-resume_if_match">exec/resume_if_match</option></term>
          <listitem>
            <para>type: <type>string-array</type></para>
            <para>default: <literal>[empty array]</literal></para>
            <para>
              This setting specifies a list of path patterns. If one of these patterns matches the resolved path of an
              <function>execve</function><manvolnum>2</manvolnum> system call, the process in question is resumed. See
              <xref linkend="pattern-matching"/> for more information on wildmatch patterns.
            </para>
            <note>
              <para>
                The initial <function>execve</function><manvolnum>2</manvolnum> is <emphasis>not</emphasis> checked.
                Thus, if sydbox is called like:
                <programlisting>
                  $> sydbox -m exec/resume_if_match+/bin/sh -- /bin/sh
                </programlisting>
                she will <emphasis>not</emphasis> execute the <command>/bin/sh</command> command.
              </para>
            </note>
            <note>
              <para>
                This functionality does <emphasis>not</emphasis> work with seccomp because once enabled, seccomp mode
                can not be disabled. If sydbox detaches from the process all observed system calls of the process will
                fail with <constant>ENOSYS</constant>. Due to this fact upon receiving this command when seccomp is
                enabled sydbox goes on to trace the process but stops sandboxing and frees all sandboxing related data
                structures of the process. The process is <emphasis>ignored</emphasis>. However, this workaround may not
                be enough for some cases, for example, when the process in question is a daemon and must resume its
                execution after sydbox exits. For such cases use <command>cmd/exec</command>.
              </para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="exec-kill_if_match">exec/kill_if_match</option></term>
          <listitem>
            <para>type: <type>string-array</type></para>
            <para>default: <literal>[empty array]</literal></para>
            <para>
              This setting specifies a list of path patterns. If one of these patterns matches the resolved path of an
              <function>execve</function><manvolnum>2</manvolnum> system call, the process in question is killed. See
              <xref linkend="pattern-matching"/> for more information on wildmatch patterns.
            </para>
            <note>
              <para>
                The initial <function>execve</function><manvolnum>2</manvolnum> is <emphasis>not</emphasis> checked.
                Thus, if sydbox is called like:
                <programlisting>
                  $> sydbox -m exec/kill_if_match+/bin/sh -- /bin/sh
                </programlisting>
                she will execute the <command>/bin/sh</command> command.
              </para>
            </note>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="filter-exec">filter/exec</option></term>
          <listitem>
            <para>type: <type>string-array</type></para>
            <para>default: <literal>[empty array]</literal></para>
            <para>
              Specifies a list of path patterns to filter for <function>execve</function><manvolnum>2</manvolnum>
              sandboxing. See <xref linkend="execve-sandboxing"/> and <xref linkend="pattern-matching"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="filter-read">filter/read</option></term>
          <listitem>
            <para>type: <type>string-array</type></para>
            <para>default: <literal>[empty array]</literal></para>
            <para>
              Specifies a list of path patterns to filter for read sandboxing. See
              <xref linkend="read-sandboxing"/> and <xref linkend="pattern-matching"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="filter-write">filter/write</option></term>
          <listitem>
            <para>type: <type>string-array</type></para>
            <para>default: <literal>[empty array]</literal></para>
            <para>
              Specifies a list of path patterns to filter for write sandboxing. See
              <xref linkend="write-sandboxing"/> and <xref linkend="pattern-matching"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="filter-network">filter/network</option></term>
          <listitem>
            <para>type: <type>string-array</type></para>
            <para>default: <literal>[empty array]</literal></para>
            <para>
              Specifies a list of network addresses to filter for network sandboxing. See
              <xref linkend="network-sandboxing"/> and <xref linkend="address-matching"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="whitelist-exec">whitelist/exec</option></term>
          <listitem>
            <para>type: <type>string-array</type></para>
            <para>default: <literal>[empty array]</literal></para>
            <para>
              Specifies a list of path patterns to whitelist for <function>execve</function><manvolnum>2</manvolnum>
              sandboxing. See <xref linkend="execve-sandboxing"/> and <xref linkend="pattern-matching"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="whitelist-read">whitelist/read</option></term>
          <listitem>
            <para>type: <type>string-array</type></para>
            <para>default: <literal>[empty array]</literal></para>
            <para>
              Specifies a list of path patterns to whitelist for read sandboxing. See <xref linkend="read-sandboxing"/>
              and <xref linkend="pattern-matching"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="whitelist-write">whitelist/write</option></term>
          <listitem>
            <para>type: <type>string-array</type></para>
            <para>default: <literal>[empty array]</literal></para>
            <para>
              Specifies a list of path patterns to whitelist for write sandboxing. See
              <xref linkend="write-sandboxing"/> and <xref linkend="pattern-matching"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="whitelist-network-bind">whitelist/network/bind</option></term>
          <listitem>
            <para>type: <type>string-array</type></para>
            <para>default: <literal>[empty array]</literal></para>
            <para>
              Specifies a list of network addresses to whitelist for <function>bind</function><manvolnum>2</manvolnum>
              network sandboxing. See <xref linkend="network-sandboxing"/> and
              <xref linkend="address-matching"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="whitelist-network-connect">whitelist/network/connect</option></term>
          <listitem>
            <para>type: <type>string-array</type></para>
            <para>default: <literal>[empty array]</literal></para>
            <para>
              Specifies a list of network addresses to whitelist for
              <function>connect</function><manvolnum>2</manvolnum> and
              <function>sendto</function><manvolnum>2</manvolnum> network sandboxing.
              See <xref linkend="network-sandboxing"/> and <xref linkend="address-matching"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="blacklist-exec">blacklist/exec</option></term>
          <listitem>
            <para>type: <type>string-array</type></para>
            <para>default: <literal>[empty array]</literal></para>
            <para>
              Specifies a list of path patterns to blacklist for <function>execve</function><manvolnum>2</manvolnum>
              sandboxing. See <xref linkend="execve-sandboxing"/> and <xref linkend="pattern-matching"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="blacklist-read">blacklist/read</option></term>
          <listitem>
            <para>type: <type>string-array</type></para>
            <para>default: <literal>[empty array]</literal></para>
            <para>
              Specifies a list of path patterns to blacklist for read sandboxing.
              See <xref linkend="read-sandboxing"/> and <xref linkend="pattern-matching"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="blacklist-write">blacklist/write</option></term>
          <listitem>
            <para>type: <type>string-array</type></para>
            <para>default: <literal>[empty array]</literal></para>
            <para>
              Specifies a list of path patterns to blacklist for write sandboxing. See
              <xref linkend="write-sandboxing"/> and <xref linkend="pattern-matching"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="blacklist-network-bind">blacklist/network/bind</option></term>
          <listitem>
            <para>type: <type>string-array</type></para>
            <para>default: <literal>[empty array]</literal></para>
            <para>
              Specifies a list of network addresses to blacklist for <function>bind</function><manvolnum>2</manvolnum>
              network sandboxing. See <xref linkend="network-sandboxing"/> and
              <xref linkend="address-matching"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="blacklist-network-connect">blacklist/network/connect</option></term>
          <listitem>
            <para>type: <type>string-array</type></para>
            <para>default: <literal>[empty array]</literal></para>
            <para>
              Specifies a list of network addresses to blacklist for
              <function>connect</function><manvolnum>2</manvolnum> and
              <function>connect</function><manvolnum>2</manvolnum> network sandboxing.
              See <xref linkend="network-sandboxing"/> and <xref linkend="address-matching"/>.
            </para>
          </listitem>
        </varlistentry>

        <varlistentry>
          <term><option id="cmd-exec">cmd/exec</option></term>
          <listitem>
            <para>type: <type>command</type></para>
            <para>default: <literal>none</literal></para>
            <para>
              Makes sydbox execute an external command without sandboxing. The program name and arguments must be
              separated with the <constant>US</constant> (unit separator, octal: 037) character.
              <citerefentry><refentrytitle>sydfmt</refentrytitle><manvolnum>1</manvolnum></citerefentry> may be used
              to do this. Consult its manual page for more information.
            </para>
            <note>
              <para>
                This command can only be used with the magic <function>stat</function><manvolnum>2</manvolnum>
                system call.
              </para>
            </note>
          </listitem>
        </varlistentry>
      </variablelist>
    </refsect2>
  </refsect1>

  <refsect1 id="sandboxing">
    <title>Sandboxing</title>

    <para>There are four sandboxing types:</para>

    <orderedlist>
      <listitem><para>Read sandboxing</para></listitem>
      <listitem><para>Write sandboxing</para></listitem>
      <listitem><para><citerefentry><refentrytitle>execve</refentrytitle><manvolnum>2</manvolnum></citerefentry> sandboxing</para></listitem>
      <listitem><para>Network sandboxing</para></listitem>
    </orderedlist>

    <para>Sandboxing may have three states:</para>

    <variablelist>
      <varlistentry>
        <term><varname>off</varname></term>
        <listitem>
          <para>Sandboxing is off, none of the relevant system calls are checked and all access is allowed.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>deny</varname></term>
        <listitem>
          <para>Sandboxing defaults to deny, whitelists can be used to allow access.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><varname>allow</varname></term>
        <listitem>
          <para>Sandboxing defaults to allow, blacklists can be used to deny access.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>
      In addition, there are filters for every sandboxing to prevent Sydbox from reporting an access violation.
      Note, access is still denied in such cases.
    </para>

    <refsect2 id="write-sandboxing">
      <title>Write Sandboxing</title>

      <para>This sandboxing checks certain system calls for filesystem write access. If a system call tries to write,
      modify or change attributes of a path, this attempt is reported and the system call is denied. There are two
      ways to customize this behaviour. Sydbox may be configured to "whitelist" some path patterns. If the path
      argument of the system call which is subject to be modified matches a pattern in the list of whitelisted path
      patterns, this attempt is not denied. Additionally, Sydbox may be configured to "filter" some path patterns. In
      this case a match will prevent Sydbox from reporting a warning about the access violation, the system call is
      still denied though.</para>

      <para>List of observed system calls are:
      <function>access</function><manvolnum>2</manvolnum>,
      <function>faccessat</function><manvolnum>2</manvolnum>,
      <function>chmod</function><manvolnum>2</manvolnum>,
      <function>fchmodat</function><manvolnum>2</manvolnum>,
      <function>chown</function><manvolnum>2</manvolnum>,
      <function>chown32</function><manvolnum>2</manvolnum>,
      <function>lchown</function><manvolnum>2</manvolnum>,
      <function>lchown32</function><manvolnum>2</manvolnum>,
      <function>fchownat</function><manvolnum>2</manvolnum>,
      <function>open</function><manvolnum>2</manvolnum>,
      <function>openat</function><manvolnum>2</manvolnum>,
      <function>creat</function><manvolnum>2</manvolnum>,
      <function>mkdir</function><manvolnum>2</manvolnum>,
      <function>mkdirat</function><manvolnum>2</manvolnum>,
      <function>mknod</function><manvolnum>2</manvolnum>,
      <function>mknodat</function><manvolnum>2</manvolnum>,
      <function>rmdir</function><manvolnum>2</manvolnum>,
      <function>truncate</function><manvolnum>2</manvolnum>,
      <function>truncate64</function><manvolnum>2</manvolnum>,
      <function>mount</function><manvolnum>2</manvolnum>,
      <function>umount</function><manvolnum>2</manvolnum>,
      <function>umount2</function><manvolnum>2</manvolnum>,
      <function>utime</function><manvolnum>2</manvolnum>,
      <function>utimes</function><manvolnum>2</manvolnum>,
      <function>utimensat</function><manvolnum>2</manvolnum>,
      <function>futimesat</function><manvolnum>2</manvolnum>,
      <function>unlink</function><manvolnum>2</manvolnum>,
      <function>unlinkat</function><manvolnum>2</manvolnum>,
      <function>link</function><manvolnum>2</manvolnum>,
      <function>linkat</function><manvolnum>2</manvolnum>,
      <function>rename</function><manvolnum>2</manvolnum>,
      <function>renameat</function><manvolnum>2</manvolnum>,
      <function>symlink</function><manvolnum>2</manvolnum>,
      <function>symlinkat</function><manvolnum>2</manvolnum>,
      <function>setxattr</function><manvolnum>2</manvolnum>,
      <function>lsetxattr</function><manvolnum>2</manvolnum>,
      <function>removexattr</function><manvolnum>2</manvolnum>, and
      <function>lremovexattr</function><manvolnum>2</manvolnum>.
      </para>
    </refsect2>

    <refsect2 id="read-sandboxing">
      <title>Read Sandboxing</title>

      <para>This sandboxing checks certain system calls for filesystem read access. If a system call tries to read
      a path, this attempt is reported and the system call is denied. See <xref linkend="write-sandboxing"/> for more
      information on how to customize this behaviour.</para>

      <para>List of observed system calls are:
      <function>access</function><manvolnum>2</manvolnum>,
      <function>faccessat</function><manvolnum>2</manvolnum>,
      <function>open</function><manvolnum>2</manvolnum>,
      <function>openat</function><manvolnum>2</manvolnum>,
      <function>listxattr</function><manvolnum>2</manvolnum>, and
      <function>llistxattr</function><manvolnum>2</manvolnum>.
      </para>
    </refsect2>

    <refsect2 id="execve-sandboxing">
      <title>execve(2) Sandboxing</title>

      <para>This sandboxing denies <citerefentry><refentrytitle>execve</refentrytitle><manvolnum>2</manvolnum></citerefentry>
      calls in case the path argument does not match one of the whitelisted patterns. Note, all
      <citerefentry><refentrytitle>exec</refentrytitle><manvolnum>3</manvolnum></citerefentry> family functions are sandboxed
      because these functions are just wrappers of the
      <citerefentry><refentrytitle>execve</refentrytitle><manvolnum>2</manvolnum></citerefentry> system call.</para>
    </refsect2>

    <refsect2 id="network-sandboxing">
      <title>Network Sandboxing</title>

      <para>This sandboxing exposes a way to prevent unwanted network calls. The observed system calls are:
      <function>bind</function><manvolnum>2</manvolnum>,
      <function>connect</function><manvolnum>2</manvolnum>, and
      <function>sendto</function><manvolnum>2</manvolnum>. To increase usability, these system calls are
      observed in two groups: <emphasis>bind</emphasis> and <emphasis>connect</emphasis>.
      <function>bind</function><manvolnum>2</manvolnum> belongs to the first group, whereas the other two
      system calls belong to the <emphasis>connect</emphasis> group.
      </para>
    </refsect2>
  </refsect1>

  <refsect1 id="pattern-matching">
    <title>Pattern Matching</title>

    <para>Sydbox uses shell-style pattern matching for whitelists and filters. The wildmatching code is borrowed from
    rsync and behaves like:</para>

    <itemizedlist>
      <listitem>
        <para>A '*' matches any path component, but it stops at slashes.</para>
      </listitem>
      <listitem>
        <para>Use '**' to match anything, including slashes.</para>
      </listitem>
      <listitem>
        <para>A '?' matches any character except a slash (/).</para>
      </listitem>
      <listitem>
        <para>A "[" introduces a character class, such as [a-z] or [[:alpha:]].</para>
      </listitem>
      <listitem>
        <para>In a wildcard pattern, a backslash can be used to escape a wildcard character, but it is matched literally
        when no wildcards are present.</para>
      </listitem>
      <listitem>
        <para>A trailing "dir_name/***" will match both the directory (as if "dir_name/" had been specified) and
        everything in the directory (as if "dir_name/**" had been specified).</para>
      </listitem>
    </itemizedlist>

    <note>
      <simpara>Sydbox checks patterns from multiple sources. There is no precedence between different sources,
      and the last matching pattern decides the outcome.</simpara>
    </note>
  </refsect1>

  <refsect1 id="address-matching">
    <title>Address Matching</title>

    <para>Sydbox has a simple address scheme to match network addresses. The addresses can be in the following
    forms:</para>

    <variablelist>
      <varlistentry>
        <term>unix:${PATTERN}</term>
        <listitem>
          <para>Specifies a UNIX socket path, <varname>${PATTERN}</varname> specifies a path pattern.
          See <xref linkend="pattern-matching"/> for more information on path patterns.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>unix-abstract:${PATTERN}</term>
        <listitem>
          <para>Specifies an abstract UNIX socket path, <varname>${PATTERN}</varname> specifies a path pattern.
          See <xref linkend="pattern-matching"/> for more information on path patterns.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>inet:${IPV4_ADDR}/${NETMASK}@${PORT_RANGE}</term>
        <listitem>
          <para>Specifies an IPV4 address. For more information, read the paragraph below.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>inet6:${IPV6_ADDR}/${NETMASK}@${PORT_RANGE}</term>
        <listitem>
          <para>Specifies an IPV6 address. For more information, read the paragraph below.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>
      <parameter>/${NETMASK}</parameter> may be omitted from <constant>inet:</constant> and <constant>inet6:</constant>
      addresses and <parameter>${PORT_RANGE}</parameter> can in two forms: either an integer or a service name from the
      <citerefentry><refentrytitle>services</refentrytitle><manvolnum>5</manvolnum></citerefentry> database. Either as
      as a single entity or as a range in the form BEGIN-END.
    </para>

    <para>In addition there are some aliases, you may use instead of specifying an address:</para>

    <variablelist>
      <varlistentry>
        <term><constant>LOOPBACK</constant></term>
        <listitem>
          <para>Expanded to <varname>inet:127.0.0.0/8</varname></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><constant>LOOPBACK6</constant></term>
        <listitem>
          <para>Expanded to <varname>inet6:::1/8</varname></para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><constant>LOCAL</constant></term>
        <listitem>
          <para>Expanded to four addresses as defined in RFC1918:</para>
          <itemizedlist>
            <listitem><para><varname>inet:127.0.0.0/8</varname></para></listitem>
            <listitem><para><varname>inet:10.0.0.0/8</varname></para></listitem>
            <listitem><para><varname>inet:172.16.0.0/12</varname></para></listitem>
            <listitem><para><varname>inet:192.168.0.0/16</varname></para></listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><constant>LOCAL6</constant></term>
        <listitem>
          <para>Expanded to four addresses:</para>
          <itemizedlist>
            <listitem><para><varname>inet6:::1</varname></para></listitem>
            <listitem><para><varname>inet6:fe80::/7</varname></para></listitem>
            <listitem><para><varname>inet6:fc00::/7</varname></para></listitem>
            <listitem><para><varname>inet6:fec0::/7</varname></para></listitem>
          </itemizedlist>
        </listitem>
      </varlistentry>
    </variablelist>
  </refsect1>

  <refsect1 id="examples">
    <title>Examples</title>

    <para>Below are examples of invocation and configuration of Sydbox.</para>

    <refsect2 id="invocation-examples">
      <title>Invocation Examples</title>

      <para>Below are some invocation examples:</para>

      <para>
        Allow all reads, deny read access to <filename>/etc/shadow</filename>:
        <programlisting>
          $&gt; sydbox -E LC_ALL=POSIX \
                       -m core/sandbox/read:allow \
                       -m blacklist/read+/etc/shadow \
                       -- /bin/sh -c 'cat /etc/shadow'
          sydbox@3141592653: -- Access Violation! --
          sydbox@3141592653: process id=20926 (abi=0 name:`cat')
          sydbox@3141592653: cwd: `/home/alip'
          sydbox@3141592653: cmdline: `cat /etc/shadow'
          sydbox@3141592653: open(`/etc/shadow')
          cat: /etc/shadow: Operation not permitted
          $&gt;
        </programlisting>
      </para>

      <para>
        Deny all reads and writes, allow read access to <filename>/dev/zero</filename> and write
        access to <filename>/dev/full</filename>. The executable dd is not static in this case thus
        allow access to /lib64 where it will load its shared libraries from as well:
      </para>
      <note>
        <para>
          On the system of the author the <command>dd</command> binary links only to libraries under
          /lib64, use <command>ldd</command> to check the linked libraries on your system.
        </para>
      </note>
      <note>
        <simpara>Note the quoting to escape shell expansion.</simpara>
      </note>
      <programlisting>
        $&gt; sydbox -E LC_ALL=POSIX \
                     -m core/sandbox/read:deny \
                     -m core/sandbox/write:deny \
                     -m 'whitelist/read+/lib64/***' \
                     -m whitelist/read+/dev/zero \
                     -m whitelist/read+/dev/full \
                     -- dd if=/dev/zero of=/dev/full count=1
        dd: writing to '/dev/full': No space left on device
        1+0 records in
        0+0 records out
        0 bytes (0 B) copied, 0.000447024 s, 0.0 kB/s
        $&gt;
      </programlisting>

      <simpara>Kill common bittorrent applications:</simpara>
      <note>
        <para>The initial <function>execve</function> is <emphasis>not</emphasis> checked.</para>
      </note>
      <programlisting>
        $&gt; sydbox -E LC_ALL=POSIX \
                     -m exec/kill_if_match+/usr/bin/ktorrent \
                     -m exec/kill_if_match+/usr/bin/rtorrent \
                     -- /bin/sh -c ktorrent
        sydbox@3141592653: callback_exec: kill_if_match pattern=`/usr/bin/ktorrent' matches execve path=`/usr/bin/ktorrent'
        sydbox@3141592653: callback_exec: killing process:3097 [abi:0 cwd:`/home/alip']
      </programlisting>

      <para>
        Execute a process without sandboxing so it will continue execution after sandboxing:
        <programlisting>
          $&gt; ./sydbox -- sh -c 'stat "$(./sydfmt exec echo hello world)"'
          hello world
            File: ‘/dev/sydbox/cmd/exec!echo\037hello\037world’
            Size: 0               Blocks: 0          IO Block: 512    character special file
          Device: 0h/0d   Inode: 0           Links: 0     Device type: 1,3
          Access: (0666/crw-rw-rw-)  Uid: (    0/    root)   Gid: (    0/    root)
          $&gt;
        </programlisting>
      </para>

    </refsect2>
  </refsect1>

  <refsect1 id="signals">
    <title>Signals</title>

    <para>
      Sydbox dumps information about the traced process tree to standard error upon receiving the SIGUSR1 signal.
      Send SIGUSR2 signal for more verbose process information.
    </para>
  </refsect1>

  <refsect1 id="notes">
    <title>Notes</title>

    <para>
      This manual page was written for sydbox version `&SYDBOX_VERSION;'.
      This version is considered unstable.
    </para>
  </refsect1>

  <refsect1 id="bugs">
    <title>Bugs</title>

    <para>
      This is unstable software and should be used with care.
      Report bugs by direct mail to <email>alip@exherbo.org</email>
    </para>

    <note>
      <para>Attaching poems encourages consideration tremendously.</para>
    </note>
  </refsect1>

  <refsect1 id="security">
    <title>Security</title>

    <para>
      Sydbox is not designed to be used as a security measure. There are many ways to circumvent the sandbox.
      Use this for diagnosing or debugging.
    </para>
  </refsect1>

  <refsect1 id="see-also">
    <title>See Also</title>
    <para>
      <citerefentry><refentrytitle>sydfmt</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>ptrace</refentrytitle><manvolnum>2</manvolnum></citerefentry>,
      <citerefentry><refentrytitle>strace</refentrytitle><manvolnum>1</manvolnum></citerefentry>
    </para>
  </refsect1>

  <refsect1 id="copyright">
    <title>COPYRIGHT</title>

    <para>Copyright &#169; 2010, 2011, 2012, 2013, 2014, 2015 Ali Polatel <email>alip@exherbo.org</email></para>
  </refsect1>
</refentry>
<!-- vim: set ts=2 sts=2 sw=2 et tw=120 nowrap spell spelllang=en : -->
